/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app;

import java.io.ByteArrayInputStream;
import java.io.File;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.BasicSessionCredentials;
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.internal.StaticCredentialsProvider;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.HeadBucketRequest;
import com.amazonaws.services.s3.model.HeadBucketResult;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.PutObjectResult;
import com.amazonaws.services.securitytoken.AWSSecurityTokenService;
import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceAsyncClient;
import com.amazonaws.services.securitytoken.model.AssumeRoleRequest;
import com.amazonaws.services.securitytoken.model.AssumeRoleResult;
import com.amazonaws.services.securitytoken.model.Credentials;

public class App {

    /**
     * example invocation
     * 
     * app.App arn:aws:iam::account-number:role/assume-role-test mysession /path/to/file.txt bucket-name my/prefix/file.txt
     * 
     */

    public static void main(String[] args) {
        String roleToAssume = args[0];
        String roleSessionName = args[1];
        String filePath = args[2];
        String bucketName = args[3];
        String keyName = args[4];
        String profile = args.length == 6 ? args[5] : null;

        AWSCredentialsProvider credsProvider = loadCredentials(true, profile, roleToAssume, roleSessionName);
        uploadObject(credsProvider, filePath, bucketName, keyName);
    }

    class AWSStaticCredentials implements AWSCredentialsProvider {

        private AWSCredentials creds;

        public AWSStaticCredentials(AWSCredentials creds) {
            this.creds = creds;
        }

        @Override
        public AWSCredentials getCredentials() {
            return this.creds;
        }

        @Override
        public void refresh() {
            throw new UnsupportedOperationException("Unimplemented method 'refresh'");
        }
        
    }

    private static AWSCredentialsProvider loadCredentials(boolean isLocal, String profile, String roleToAssume, String roleSessionName) {
        final AWSCredentialsProvider credentialsProvider;
        if (isLocal) {
            AWSSecurityTokenService stsClient = new AWSSecurityTokenServiceAsyncClient(
                new ProfileCredentialsProvider(profile)).withRegion(Regions.EU_WEST_2);
            
            AssumeRoleRequest assumeRoleRequest = new AssumeRoleRequest().withDurationSeconds(900)
                    .withRoleArn(roleToAssume)
                    .withRoleSessionName(roleSessionName);

            AssumeRoleResult assumeRoleResult = stsClient.assumeRole(assumeRoleRequest);
            Credentials creds = assumeRoleResult.getCredentials();            

            credentialsProvider = new StaticCredentialsProvider(
                new BasicSessionCredentials(creds.getAccessKeyId(), creds.getSecretAccessKey(), creds.getSessionToken()));
        } else {
            credentialsProvider = new DefaultAWSCredentialsProviderChain();
        }

        return credentialsProvider;
    }

    private static void uploadObject(AWSCredentialsProvider credsProvider, String file_path, String bucket_name, String key_name) {
        final AmazonS3 s3 = new AmazonS3Client(credsProvider).withRegion(Regions.EU_WEST_2);
        // HeadBucketResult hbr = s3.headBucket(new HeadBucketRequest(bucket_name));
        // System.out.println(hbr);

        System.out.format("Uploading %s to S3 bucket %s...\n", file_path, bucket_name);
        

        try {
            s3.putObject(bucket_name, key_name, new File(file_path));
            System.out.println("Uploaded OK without SSEAlgo");    
            uploadObjectWithSSEEncryption(s3, bucket_name, key_name);
        } catch (AmazonServiceException e) {
            System.err.println(e.getErrorMessage());
            System.exit(1);
        }
    }

    private static void uploadObjectWithSSEEncryption(AmazonS3 s3Client, String bucketName, String keyName) {
        System.out.println("Uploading with SSE AES256");
        String objectContent = "Test object encrypted with SSE";
        byte[] objectBytes = objectContent.getBytes();

        // Specify server-side encryption.
        ObjectMetadata objectMetadata = new ObjectMetadata();
        objectMetadata.setContentLength(objectBytes.length);
        objectMetadata.setSSEAlgorithm(ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION);
        PutObjectRequest putRequest = new PutObjectRequest(bucketName,
                keyName + "-sse",
                new ByteArrayInputStream(objectBytes),
                objectMetadata);

        // Upload the object and check its encryption status.
        PutObjectResult putResult = s3Client.putObject(putRequest);
        System.out.println("Object \"" + keyName + "\" uploaded with SSE.");
    }

}

